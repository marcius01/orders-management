version: '3.8'

services:
  # Database per Kong
  kong-db:
    image: postgres:latest
    container_name: kong-database
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
      - POSTGRES_PASSWORD=kongpass # Usa una password più sicura in produzione
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Esegui le migrazioni del database di Kong
  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    depends_on:
      kong-db:
        condition: service_healthy
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_PASSWORD=kongpass
      - KONG_PG_USER=kong
    command: "kong migrations bootstrap"
    networks:
      - kong-net
    restart: on-failure

  # Il Gateway Kong vero e proprio
  kong:
    image: kong:latest
    container_name: kong-gateway
    depends_on:
      kong-migrations:
        condition: service_completed_successfully
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-db
      - KONG_PG_USER=kong
      - KONG_PG_PASSWORD=kongpass
      - KONG_ADMIN_LISTEN=0.0.0.0:8001 # API di amministrazione di Kong
      - KONG_PROXY_LISTEN=0.0.0.0:8000 # Porta per il traffico pubblico
      - KONG_PLUGINS=bundled,jwt,request-transformer # Abilita i plugin che ci servono
    ports:
      - "8000:8000" # Porta pubblica
      - "8001:8001" # Porta di amministrazione
    networks:
      - kong-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Zookeeper: il coordinatore per Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    networks:
      - kong-net # Usa la stessa rete degli altri servizi
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # Kafka Broker: la nostra "bacheca degli annunci"
  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    networks:
      - kong-net
    depends_on:
      - zookeeper
    ports:
      # Porta esposta all'esterno per i nostri servizi Quarkus
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      # Questo è fondamentale: dice a Kafka come gli altri servizi possono trovarlo
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # Kafdrop: una comoda interfaccia web per esplorare Kafka
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    networks:
      - kong-net
    depends_on:
      - kafka
    ports:
      - "9000:9000" # Porta per accedere all'interfaccia web
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092" # Dice a Kafdrop come trovare Kafka all'interno della rete Docker
      
networks:
  kong-net:
    driver: bridge

volumes:
  kong_data: